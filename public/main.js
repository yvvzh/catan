/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/boardInit.js":
/*!**************************!*\
  !*** ./src/boardInit.js ***!
  \**************************/
/***/ (() => {

eval("const grid = document.querySelector(\".grid-container\");\r\nconst matrix = document.querySelector(\".interactive-grid\");\r\n\r\nconst tiles = [\r\n    {\r\n        name: \"port\",\r\n        asset: \"./assets/tiles/tile_port.jpg\",\r\n        quantity: 9,\r\n        token: false,\r\n        trade: true,\r\n    },\r\n    {\r\n        name: \"sea\",\r\n        asset: \"./assets/tiles/tile_sea.jpg\",\r\n        quantity: 9,\r\n        token: false,\r\n        trade: false,\r\n    },\r\n    {\r\n        name: \"wheat\",\r\n        asset: \"./assets/tiles/tile_wheat.jpg\",\r\n        quantity: 4,\r\n        token: true,\r\n        trade: false,\r\n    },\r\n    {\r\n        name: \"clay\",\r\n        asset: \"./assets/tiles/tile_clay.jpg\",\r\n        quantity: 3,\r\n        token: true,\r\n        trade: false,\r\n    },\r\n    {\r\n        name: \"rock\",\r\n        asset: \"./assets/tiles/tile_rock.jpg\",\r\n        quantity: 3,\r\n        token: true,\r\n        trade: false,\r\n    },\r\n    {\r\n        name: \"wood\",\r\n        asset: \"./assets/tiles/tile_wood.jpg\",\r\n        quantity: 4,\r\n        token: true,\r\n        trade: false,\r\n    },\r\n    {\r\n        name: \"sheep\",\r\n        asset: \"./assets/tiles/tile_sheep.jpg\",\r\n        quantity: 4,\r\n        token: true,\r\n        trade: false,\r\n    },\r\n    {\r\n        name: \"desert\",\r\n        asset: \"./assets/tiles/tile_desert.jpg\",\r\n        quantity: 1,\r\n        token: true,\r\n        trade: false,\r\n    },\r\n];\r\n\r\nconst tokens = [\"5\", \"2\", \"6\", \"10\", \"9\", \"4\", \"3\", \"8\", \"11\", \"5\", \"8\", \"4\", \"3\", \"6\", \"10\", \"11\", \"12\", \"9\"];\r\n\r\nconst trades = [\r\n    {\r\n        name: \"classic\",\r\n        quantity: 4,\r\n        impact: \"all\",\r\n        ratio: 3,\r\n    },\r\n    {\r\n        name: \"wood\",\r\n        quantity: 1,\r\n        impact: \"wood\",\r\n        ratio: 2,\r\n    },\r\n    {\r\n        name: \"clay\",\r\n        quantity: 1,\r\n        impact: \"clay\",\r\n        ratio: 2,\r\n    },\r\n    {\r\n        name: \"wheat\",\r\n        quantity: 1,\r\n        impact: \"wheat\",\r\n        ratio: 2,\r\n    },\r\n    {\r\n        name: \"sheep\",\r\n        quantity: 1,\r\n        impact: \"sheep\",\r\n        ratio: 2,\r\n    },\r\n    {\r\n        name: \"rock\",\r\n        quantity: 1,\r\n        impact: \"rock\",\r\n        ratio: 2,\r\n    },\r\n];\r\n\r\nconst pattern = [\r\n    \"port\",\r\n    \"sea\",\r\n    \"port\",\r\n    \"sea\",\r\n    \"sea\",\r\n    \"random\",\r\n    \"random\",\r\n    \"random\",\r\n    \"port\",\r\n    \"port\",\r\n    \"random\",\r\n    \"random\",\r\n    \"random\",\r\n    \"random\",\r\n    \"sea\",\r\n    \"sea\",\r\n    \"random\",\r\n    \"random\",\r\n    \"random\",\r\n    \"random\",\r\n    \"random\",\r\n    \"port\",\r\n    \"port\",\r\n    \"random\",\r\n    \"random\",\r\n    \"random\",\r\n    \"random\",\r\n    \"sea\",\r\n    \"sea\",\r\n    \"random\",\r\n    \"random\",\r\n    \"random\",\r\n    \"port\",\r\n    \"port\",\r\n    \"sea\",\r\n    \"port\",\r\n    \"sea\",\r\n];\r\n\r\nlet availableTiles = [\"wheat\", \"clay\", \"rock\", \"wood\", \"sheep\", \"desert\"];\r\n\r\nlet usedWheatTile = 0;\r\nlet usedClayTile = 0;\r\nlet usedRockTile = 0;\r\nlet usedWoodTile = 0;\r\nlet usedSheepTile = 0;\r\nlet usedDesertTile = 0;\r\n\r\nlet availableTrades = [\"classic\", \"wood\", \"clay\", \"wheat\", \"sheep\", \"rock\"];\r\n\r\nlet usedClassicTrade = 0;\r\nlet usedWoodTrade = 0;\r\nlet usedWheatTrade = 0;\r\nlet usedClayTrade = 0;\r\nlet usedRockTrade = 0;\r\nlet usedSheepTrade = 0;\r\n\r\nconst patternCSA = [\r\n    [0, 3], // port 1\r\n    [1, 5], // port 2\r\n    [0, 3, 4, 7, 8, 12], // tile 1\r\n    [1, 4, 5, 8, 9, 13], // tile 2\r\n    [2, 5, 6, 9, 10, 14], // tile 3\r\n    [6, 10], // port 3\r\n    [11, 16], // port 4\r\n    [7, 11, 12, 16, 17, 22], // tile 4\r\n    [8, 12, 13, 17, 18, 23], // tile 5\r\n    [9, 13, 14, 18, 19, 24], // tile 6\r\n    [10, 14, 15, 19, 20, 25], // tile 7\r\n    [16, 21, 22, 27, 28, 33], // tile 8\r\n    [17, 22, 23, 28, 29, 34], // tile 9\r\n    [18, 23, 24, 29, 30, 35], // tile 10\r\n    [19, 24, 25, 30, 31, 36], // tile 11\r\n    [20, 25, 26, 31, 32, 37], // tile 12\r\n    [26, 32], // port 5\r\n    [27, 23], // port 6\r\n    [28, 33, 34, 38, 39, 43], // tile 13\r\n    [29, 34, 35, 39, 40, 44], // tile 14\r\n    [30, 35, 36, 40, 41, 45], // tile 15\r\n    [31, 36, 37, 41, 42, 46], // tile 16\r\n    [39, 43, 44, 47, 48, 51], // tile 17\r\n    [40, 44, 45, 48, 49, 52], // tile 18\r\n    [41, 45, 46, 49, 50, 53], // tile 19\r\n    [46, 50], // port 7\r\n    [47, 51], // port 8\r\n    [49, 52], // port 9\r\n];\r\nlet rawCSA = [];\r\n\r\nlet citySpotsAttributes = [];\r\nlet roadSpotsAttributes = [];\r\nlet diceRollEvents = [\r\n    {\r\n        number: \"7\",\r\n        events: [\"thieves\"],\r\n    },\r\n];\r\nlet usedSpots = [];\r\n\r\nboardInit();\r\nconsole.log(citySpotsAttributes);\r\nconsole.log(roadSpotsAttributes);\r\nconsole.log(diceRollEvents);\r\n\r\nfunction boardInit() {\r\n    gridInit();\r\n    let patternCSAindex = 0;\r\n    let tokensIndex = 0;\r\n\r\n    for (let i = 0; i < pattern.length; i++) {\r\n        let currentTrade = \"none\";\r\n        let currentRessource = \"desert\";\r\n        let currentNumber = \"none\";\r\n        let checkCSA = 0;\r\n\r\n        const tile = document.createElement(\"div\");\r\n        tile.classList.add(\"hex\");\r\n        const asset = document.createElement(\"img\");\r\n        const assetLink = assetSelector(i);\r\n        const currentRessourceIndex = tiles.findIndex(function (obj) {\r\n            return obj[\"asset\"] === assetLink;\r\n        });\r\n        currentRessource = tiles[currentRessourceIndex].name;\r\n\r\n        asset.src = assetLink;\r\n        tile.appendChild(asset);\r\n\r\n        if (pattern[i] === \"random\") {\r\n            const token = document.createElement(\"div\");\r\n            token.classList.add(\"token\");\r\n            if (!asset.src.includes(\"desert\")) {\r\n                const number = document.createElement(\"div\");\r\n                number.classList.add(\"number\");\r\n                number.textContent = tokens[tokensIndex];\r\n                currentNumber = tokens[tokensIndex];\r\n                token.appendChild(number);\r\n\r\n                if (tokens[tokensIndex] === \"6\" || tokens[tokensIndex] === \"8\") {\r\n                    token.classList.add(\"great-odds\");\r\n                }\r\n\r\n                tokensIndex++;\r\n            } else {\r\n                token.classList.add(\"thieves\");\r\n                const icon = document.createElement(\"i\");\r\n                icon.classList.add(\"bx\", \"bx-block\");\r\n                token.appendChild(icon);\r\n            }\r\n            tile.appendChild(token);\r\n        } else if (pattern[i] === \"port\") {\r\n            const token = document.createElement(\"div\");\r\n            token.classList.add(\"token\", \"ratio\");\r\n            const tradeIndex = generateRandomTrade();\r\n            if (tradeIndex > 0) {\r\n                const name = document.createElement(\"div\");\r\n                name.textContent = trades[tradeIndex].name.toUpperCase();\r\n                token.appendChild(name);\r\n            }\r\n            currentTrade = trades[tradeIndex].name;\r\n            const ratio = document.createElement(\"div\");\r\n            ratio.textContent = `${trades[tradeIndex].ratio} : 1`;\r\n            token.appendChild(ratio);\r\n            tile.appendChild(token);\r\n        }\r\n        grid.appendChild(tile);\r\n\r\n        if (currentRessource !== \"port\" && currentRessource !== \"sea\" && currentRessource !== \"desert\") {\r\n            manageRawCSA(\"ressource\", patternCSA[patternCSAindex], currentRessource);\r\n            checkCSA++;\r\n        } else if (currentRessource === \"desert\") {\r\n            checkCSA++;\r\n        }\r\n\r\n        if (currentNumber !== \"none\") {\r\n            manageRawCSA(\"number\", patternCSA[patternCSAindex], currentNumber);\r\n            checkCSA++;\r\n        }\r\n\r\n        if (currentTrade !== \"none\") {\r\n            manageRawCSA(\"trade\", patternCSA[patternCSAindex], currentTrade);\r\n            checkCSA++;\r\n        }\r\n\r\n        if (checkCSA > 0) {\r\n            patternCSAindex++;\r\n        }\r\n        if (currentNumber !== \"none\" && currentRessource !== \"port\" && currentRessource !== \"sea\" && currentRessource !== \"desert\") {\r\n            const eventIndex = diceRollEvents.findIndex(function (obj) {\r\n                return obj[\"number\"] === currentNumber;\r\n            });\r\n            if (eventIndex !== -1) {\r\n                diceRollEvents[eventIndex].events.push(currentRessource);\r\n            } else {\r\n                const newDiceRollEvent = {\r\n                    number: currentNumber,\r\n                    events: [currentRessource],\r\n                };\r\n                diceRollEvents.push(newDiceRollEvent);\r\n            }\r\n        }\r\n    }\r\n    manageCitySpotAttributes();\r\n}\r\n\r\nfunction gridInit() {\r\n    const tradeSpotPattern = [0, 1, 3, 5, 6, 10, 11, 16, 26, 27, 32, 33, 46, 47, 49, 50, 51, 52];\r\n    for (let i = 0; i < 126; i++) {\r\n        const spot = document.createElement(\"div\");\r\n        spot.id = `spot${i}`;\r\n        if (i < 54) {\r\n            spot.classList.add(\"spot\", \"citySpot\");\r\n            if (tradeSpotPattern.includes(i)) {\r\n                spot.classList.add(\"tradeSpot\");\r\n            }\r\n        } else {\r\n            spot.classList.add(\"spot\", \"roadSpot\");\r\n            const newRoadSpot = {\r\n                id: spot.id,\r\n                owner: \"none\",\r\n                built: false,\r\n            };\r\n            roadSpotsAttributes.push(newRoadSpot);\r\n        }\r\n\r\n        matrix.appendChild(spot);\r\n    }\r\n}\r\n\r\nfunction manageRawCSA(type, spots, value) {\r\n    switch (type) {\r\n        case \"trade\":\r\n            spots.forEach((spot) => {\r\n                const spotIndex = rawCSA.findIndex(function (obj) {\r\n                    return obj[\"id\"] === spot;\r\n                });\r\n                if (spotIndex !== -1) {\r\n                    rawCSA[spotIndex].trade = value;\r\n                } else {\r\n                    let newRawCSA = {\r\n                        id: spot,\r\n                        numbers: [],\r\n                        ressources: [0, 0, 0, 0, 0],\r\n                        trade: value,\r\n                    };\r\n                    rawCSA.push(newRawCSA);\r\n                }\r\n            });\r\n            break;\r\n\r\n        case \"ressource\":\r\n            let indexToItterate;\r\n\r\n            switch (value) {\r\n                case \"wheat\":\r\n                    indexToItterate = 0;\r\n                    break;\r\n                case \"clay\":\r\n                    indexToItterate = 1;\r\n                    break;\r\n                case \"rock\":\r\n                    indexToItterate = 2;\r\n                    break;\r\n                case \"wood\":\r\n                    indexToItterate = 3;\r\n                    break;\r\n                case \"sheep\":\r\n                    indexToItterate = 4;\r\n                    break;\r\n                default:\r\n                    console.log(\"switch case for ressources in manageRawCSA() FAILED\");\r\n            }\r\n\r\n            spots.forEach((spot) => {\r\n                const spotIndex = rawCSA.findIndex(function (obj) {\r\n                    return obj[\"id\"] === spot;\r\n                });\r\n                if (spotIndex !== -1) {\r\n                    rawCSA[spotIndex].ressources[indexToItterate]++;\r\n                } else {\r\n                    let newRawCSA = {\r\n                        id: spot,\r\n                        numbers: [],\r\n                        ressources: [0, 0, 0, 0, 0],\r\n                        trade: \"none\",\r\n                    };\r\n                    newRawCSA.ressources[indexToItterate]++;\r\n                    rawCSA.push(newRawCSA);\r\n                }\r\n            });\r\n            break;\r\n\r\n        case \"number\":\r\n            spots.forEach((spot) => {\r\n                const spotIndex = rawCSA.findIndex(function (obj) {\r\n                    return obj[\"id\"] === spot;\r\n                });\r\n                if (spotIndex !== -1) {\r\n                    rawCSA[spotIndex].numbers.push(value);\r\n                } else {\r\n                    let newRawCSA = {\r\n                        id: spot,\r\n                        numbers: [],\r\n                        ressources: [0, 0, 0, 0, 0],\r\n                        trade: \"none\",\r\n                    };\r\n                    newRawCSA.numbers.push(value);\r\n                    rawCSA.push(newRawCSA);\r\n                }\r\n            });\r\n            break;\r\n        default:\r\n            console.log(\"manageRawCSA() switch case FAILED\");\r\n    }\r\n}\r\n\r\nfunction manageCitySpotAttributes() {\r\n    rawCSA.forEach((e) => {\r\n        const newCSA = {\r\n            id: `spot${e.id}`, // spot id\r\n            numbers: e.numbers, // numbers associated\r\n            wheat: e.ressources[0], // qty\r\n            clay: e.ressources[1], // qty\r\n            rock: e.ressources[2], // qty\r\n            wood: e.ressources[3], // qty\r\n            sheep: e.ressources[4], // qty\r\n            trade: e.trade, // name of the trade\r\n            owner: \"none\",\r\n            building: \"none\",\r\n        };\r\n        citySpotsAttributes.push(newCSA);\r\n    });\r\n}\r\n\r\nfunction assetSelector(i) {\r\n    let asset;\r\n    switch (pattern[i]) {\r\n        case \"port\":\r\n            asset = tiles[0].asset;\r\n            break;\r\n        case \"sea\":\r\n            asset = tiles[1].asset;\r\n            break;\r\n        case \"random\":\r\n            asset = tiles[generateRandomAsset()].asset;\r\n            break;\r\n        default:\r\n            console.log(\"assetSelector() switch case FAILED\");\r\n    }\r\n\r\n    return asset;\r\n}\r\n\r\nfunction generateRandomAsset() {\r\n    const random = Math.floor(Math.random() * availableTiles.length);\r\n    const selected = availableTiles[random];\r\n    let assetIndex;\r\n    switch (selected) {\r\n        case \"wheat\":\r\n            assetIndex = 2;\r\n            usedWheatTile++;\r\n            break;\r\n        case \"clay\":\r\n            assetIndex = 3;\r\n            usedClayTile++;\r\n            break;\r\n        case \"rock\":\r\n            assetIndex = 4;\r\n            usedRockTile++;\r\n            break;\r\n        case \"wood\":\r\n            assetIndex = 5;\r\n            usedWoodTile++;\r\n            break;\r\n        case \"sheep\":\r\n            assetIndex = 6;\r\n            usedSheepTile++;\r\n            break;\r\n        case \"desert\":\r\n            assetIndex = 7;\r\n            usedDesertTile++;\r\n            break;\r\n        default:\r\n            console.log(\"generateRandomAsset() switch case FAILED\");\r\n    }\r\n\r\n    manageAvailableTiles(tiles[assetIndex].name);\r\n\r\n    return assetIndex;\r\n}\r\n\r\nfunction manageAvailableTiles(name) {\r\n    let elementToCheck;\r\n    switch (name) {\r\n        case \"wheat\":\r\n            elementToCheck = usedWheatTile;\r\n            break;\r\n        case \"clay\":\r\n            elementToCheck = usedClayTile;\r\n            break;\r\n        case \"rock\":\r\n            elementToCheck = usedRockTile;\r\n            break;\r\n        case \"wood\":\r\n            elementToCheck = usedWoodTile;\r\n            break;\r\n        case \"sheep\":\r\n            elementToCheck = usedSheepTile;\r\n            break;\r\n        case \"desert\":\r\n            elementToCheck = usedDesertTile;\r\n            break;\r\n        default:\r\n            console.log(\"manageAvailableTiles() switch case FAILED\");\r\n    }\r\n    const quantityToCheck = tiles[tiles.findIndex((tile) => tile.name === name)].quantity;\r\n\r\n    if (elementToCheck >= quantityToCheck) {\r\n        let indexToRemove = availableTiles.indexOf(name);\r\n        if (indexToRemove !== -1) {\r\n            availableTiles.splice(indexToRemove, 1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction generateRandomTrade() {\r\n    const random = Math.floor(Math.random() * availableTrades.length);\r\n    const selected = availableTrades[random];\r\n    let tradeIndex;\r\n    switch (selected) {\r\n        case \"classic\":\r\n            tradeIndex = 0;\r\n            usedClassicTrade++;\r\n            break;\r\n        case \"wood\":\r\n            tradeIndex = 1;\r\n            usedWoodTrade++;\r\n            break;\r\n        case \"clay\":\r\n            tradeIndex = 2;\r\n            usedClayTrade++;\r\n            break;\r\n        case \"wheat\":\r\n            tradeIndex = 3;\r\n            usedWheatTrade++;\r\n            break;\r\n        case \"sheep\":\r\n            tradeIndex = 4;\r\n            usedSheepTrade++;\r\n            break;\r\n        case \"rock\":\r\n            tradeIndex = 5;\r\n            usedRockTrade++;\r\n            break;\r\n        default:\r\n            console.log(\"generateRandomTrade() switch case FAILED\");\r\n    }\r\n\r\n    manageAvailableTrades(trades[tradeIndex].name);\r\n\r\n    return tradeIndex;\r\n}\r\n\r\nfunction manageAvailableTrades(name) {\r\n    let elementToCheck;\r\n    switch (name) {\r\n        case \"wheat\":\r\n            elementToCheck = usedWheatTrade;\r\n            break;\r\n        case \"clay\":\r\n            elementToCheck = usedClayTrade;\r\n            break;\r\n        case \"rock\":\r\n            elementToCheck = usedRockTrade;\r\n            break;\r\n        case \"wood\":\r\n            elementToCheck = usedWoodTrade;\r\n            break;\r\n        case \"sheep\":\r\n            elementToCheck = usedSheepTrade;\r\n            break;\r\n        case \"classic\":\r\n            elementToCheck = usedClassicTrade;\r\n            break;\r\n        default:\r\n            console.log(\"manageAvailableTrades() switch case FAILED\");\r\n    }\r\n    const quantityToCheck = trades[trades.findIndex((trade) => trade.name === name)].quantity;\r\n\r\n    if (elementToCheck >= quantityToCheck) {\r\n        let indexToRemove = availableTrades.indexOf(name);\r\n        if (indexToRemove !== -1) {\r\n            availableTrades.splice(indexToRemove, 1);\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://catan/./src/boardInit.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _boardInit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boardInit.js */ \"./src/boardInit.js\");\n/* harmony import */ var _boardInit_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_boardInit_js__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\n\n//# sourceURL=webpack://catan/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;